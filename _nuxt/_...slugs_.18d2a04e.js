import{_ as o,a0 as l,c as d,u as n,Q as v,o as t,p as i,e as r,a as c,$ as s}from"./entry.2f35a9f7.js";const p=a=>(i("data-v-415d2174"),a=a(),r(),a),b=p(()=>c("p",{class:"page-title"},"기본레이아웃구조",-1)),g={key:0,class:"layout"},_=s('<div class="wrapper box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>#wrapper</strong> - id 사용: 전체를 감싸는 flex 속성 박스</label><div class="header box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;header&gt;</strong> - 태그 사용: 헤더 구성 요소를 감싸는 박스로 <span data-v-415d2174>상단 고정시 position: sticky 속성을 사용해 고정시킨다.</span></label><div class="container box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;main&gt;</strong> - 클래스 사용: 공통 레이아웃 클래스로 영역의 넓이 속성을 지정해주는 박스</label><div class="container box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;nav&gt;</strong> - 태그 사용: 사이트 메뉴</label></div></div></div><div class="main box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;main&gt;</strong> - 태그 사용: 컨텐츠 구성 요소를 감싸는 박스로 <span data-v-415d2174>flex:1 속성을 사용해 헤더와 푸터를 제외한 나머지 영역이 높이가 되도록 한다.</span></label><div class="container box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>.container</strong> - 클래스 사용: 공통 레이아웃 클래스로 영역의 넓이 속성을 지정해주는 박스로 <span data-v-415d2174>헤더/푸터 등 공통 사용</span></label></div></div><div class="footer box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;footer&gt;</strong> - 태그 사용: 푸터 구성 요소를 감싸는 박스</label></div></div>',1),x=[_],u={key:1,class:"layout"},h=s('<div class="wrapper has-side box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>#wrapper</strong> - id 사용: 전체를 감싸는 flex 속성 박스</label><div class="header box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;header&gt;</strong> - 태그 사용: 헤더 구성 요소를 감싸는 박스로 <span data-v-415d2174>상단 고정시 position: sticky 속성을 사용해 고정시킨다.</span></label></div><div class="wrapper-inner box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>#wrapperInner</strong> - id 사용: 헤더를 제외한 전체를 감싸는 flex 속성 박스</label><div class="side box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>#side</strong> - id 사용: 메뉴 등 사이드 영역 구성<br data-v-415d2174> 고정 사용시 <span data-v-415d2174>position: sticky 속성을 사용해 고정시킨다.</span></label></div><div class="contents box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>#contents</strong> - id 사용: side를 제외한 요소들을 감싸는 flex 속성 박스</label><div class="header box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>header</strong> - 태그 사용: 헤더 구성 요소를 감싸는 박스로 <span data-v-415d2174>상단 고정시 position: sticky 속성을 사용해 고정시킨다.</span></label></div><div class="main box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;main&gt;</strong> - 태그 사용: 컨텐츠 구성 요소를 감싸는 박스로 <span data-v-415d2174>flex:1 속성을 사용해 헤더와 푸터를 제외한 나머지 영역이 높이가 되도록 한다.</span></label><div class="container box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>.container</strong> - 클래스 사용: 공통 레이아웃 클래스로 영역의 넓이 속성을 지정해주는 박스로 <span data-v-415d2174>헤더/푸터 등 공통 사용</span></label></div></div><div class="footer box" data-v-415d2174><label data-v-415d2174><strong data-v-415d2174>&lt;footer&gt;</strong> - 태그 사용: 푸터 구성 요소를 감싸는 박스</label></div></div></div></div>',1),f=[h],m={__name:"[...slugs]",setup(a){const e=l().params.slugs;return(k,w)=>(t(),d(v,null,[b,n(e)[0]==="basic"?(t(),d("div",g,x)):(t(),d("div",u,f))],64))}},S=o(m,[["__scopeId","data-v-415d2174"]]);export{S as default};
